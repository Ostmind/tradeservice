// Code generated by MockGen. DO NOT EDIT.
// Source: categories.go
//
// Generated by this command:
//
//	mockgen -source=categories.go -destination=mock/categoriesrepository.go
//

// Package mock_handlers is a generated GoMock package.
package mock_categories

import (
	context "context"
	reflect "reflect"
	models "tradeservice/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockCategoryManager is a mock of CategoryManager interface.
type MockCategoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryManagerMockRecorder
	isgomock struct{}
}

// MockCategoryManagerMockRecorder is the mock recorder for MockCategoryManager.
type MockCategoryManagerMockRecorder struct {
	mock *MockCategoryManager
}

// NewMockCategoryManager creates a new mock instance.
func NewMockCategoryManager(ctrl *gomock.Controller) *MockCategoryManager {
	mock := &MockCategoryManager{ctrl: ctrl}
	mock.recorder = &MockCategoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryManager) EXPECT() *MockCategoryManagerMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockCategoryManager) AddCategory(ctx context.Context, name, productId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", ctx, name, productId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockCategoryManagerMockRecorder) AddCategory(ctx, name, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockCategoryManager)(nil).AddCategory), ctx, name, productId)
}

// DeleteCategory mocks base method.
func (m *MockCategoryManager) DeleteCategory(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryManagerMockRecorder) DeleteCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryManager)(nil).DeleteCategory), ctx, id)
}

// GetCategory mocks base method.
func (m *MockCategoryManager) GetCategory(ctx context.Context) ([]models.CategoryDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx)
	ret0, _ := ret[0].([]models.CategoryDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockCategoryManagerMockRecorder) GetCategory(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryManager)(nil).GetCategory), ctx)
}

// SetCategory mocks base method.
func (m *MockCategoryManager) SetCategory(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCategory", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCategory indicates an expected call of SetCategory.
func (mr *MockCategoryManagerMockRecorder) SetCategory(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCategory", reflect.TypeOf((*MockCategoryManager)(nil).SetCategory), ctx, id, name)
}
