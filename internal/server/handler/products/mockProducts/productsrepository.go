// Code generated by MockGen. DO NOT EDIT.
// Source: products.go
//
// Generated by this command:
//
//	mockgen -source=products.go -destination=mockProducts/productsrepository.go
//

// Package mock_handlers is a generated GoMock package.
package mock_products

import (
	context "context"
	reflect "reflect"
	models "tradeservice/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockProductManager is a mock of ProductManager interface.
type MockProductManager struct {
	ctrl     *gomock.Controller
	recorder *MockProductManagerMockRecorder
	isgomock struct{}
}

// MockProductManagerMockRecorder is the mock recorder for MockProductManager.
type MockProductManagerMockRecorder struct {
	mock *MockProductManager
}

// NewMockProductManager creates a new mock instance.
func NewMockProductManager(ctrl *gomock.Controller) *MockProductManager {
	mock := &MockProductManager{ctrl: ctrl}
	mock.recorder = &MockProductManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductManager) EXPECT() *MockProductManagerMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductManager) AddProduct(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductManagerMockRecorder) AddProduct(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductManager)(nil).AddProduct), ctx, name)
}

// DeleteProduct mocks base method.
func (m *MockProductManager) DeleteProduct(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductManagerMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductManager)(nil).DeleteProduct), ctx, id)
}

// GetProduct mocks base method.
func (m *MockProductManager) GetProduct(ctx context.Context) ([]models.ProductDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx)
	ret0, _ := ret[0].([]models.ProductDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductManagerMockRecorder) GetProduct(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductManager)(nil).GetProduct), ctx)
}

// SetProduct mocks base method.
func (m *MockProductManager) SetProduct(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProduct", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProduct indicates an expected call of SetProduct.
func (mr *MockProductManagerMockRecorder) SetProduct(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProduct", reflect.TypeOf((*MockProductManager)(nil).SetProduct), ctx, id, name)
}
